
pid_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004994  08004994  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004994  08004994  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004994  08004994  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200000b0  08004a4c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004a4c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d011  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c91  00000000  00000000  0002d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f11  00000000  00000000  00030528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d412  00000000  00000000  00048439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2f4  00000000  00000000  0005584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0b3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000e0b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004918 	.word	0x08004918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	08004918 	.word	0x08004918

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <__gesf2>:
 8000de8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dec:	e006      	b.n	8000dfc <__cmpsf2+0x4>
 8000dee:	bf00      	nop

08000df0 <__lesf2>:
 8000df0:	f04f 0c01 	mov.w	ip, #1
 8000df4:	e002      	b.n	8000dfc <__cmpsf2+0x4>
 8000df6:	bf00      	nop

08000df8 <__cmpsf2>:
 8000df8:	f04f 0c01 	mov.w	ip, #1
 8000dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	bf18      	it	ne
 8000e0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e12:	d011      	beq.n	8000e38 <__cmpsf2+0x40>
 8000e14:	b001      	add	sp, #4
 8000e16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1a:	bf18      	it	ne
 8000e1c:	ea90 0f01 	teqne	r0, r1
 8000e20:	bf58      	it	pl
 8000e22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e26:	bf88      	it	hi
 8000e28:	17c8      	asrhi	r0, r1, #31
 8000e2a:	bf38      	it	cc
 8000e2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e30:	bf18      	it	ne
 8000e32:	f040 0001 	orrne.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	d102      	bne.n	8000e44 <__cmpsf2+0x4c>
 8000e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e42:	d105      	bne.n	8000e50 <__cmpsf2+0x58>
 8000e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e48:	d1e4      	bne.n	8000e14 <__cmpsf2+0x1c>
 8000e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4e:	d0e1      	beq.n	8000e14 <__cmpsf2+0x1c>
 8000e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_cfrcmple>:
 8000e58:	4684      	mov	ip, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	e7ff      	b.n	8000e60 <__aeabi_cfcmpeq>

08000e60 <__aeabi_cfcmpeq>:
 8000e60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e62:	f7ff ffc9 	bl	8000df8 <__cmpsf2>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	bf48      	it	mi
 8000e6a:	f110 0f00 	cmnmi.w	r0, #0
 8000e6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e70 <__aeabi_fcmpeq>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff fff4 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e78:	bf0c      	ite	eq
 8000e7a:	2001      	moveq	r0, #1
 8000e7c:	2000      	movne	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_fcmplt>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff ffea 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e8c:	bf34      	ite	cc
 8000e8e:	2001      	movcc	r0, #1
 8000e90:	2000      	movcs	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmple>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffe0 	bl	8000e60 <__aeabi_cfcmpeq>
 8000ea0:	bf94      	ite	ls
 8000ea2:	2001      	movls	r0, #1
 8000ea4:	2000      	movhi	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmpge>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffd2 	bl	8000e58 <__aeabi_cfrcmple>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpgt>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffc8 	bl	8000e58 <__aeabi_cfrcmple>
 8000ec8:	bf34      	ite	cc
 8000eca:	2001      	movcc	r0, #1
 8000ecc:	2000      	movcs	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_f2uiz>:
 8000ed4:	0042      	lsls	r2, r0, #1
 8000ed6:	d20e      	bcs.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ed8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000edc:	d30b      	bcc.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ede:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ee2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee6:	d409      	bmi.n	8000efc <__aeabi_f2uiz+0x28>
 8000ee8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr
 8000efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f00:	d101      	bne.n	8000f06 <__aeabi_f2uiz+0x32>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d102      	bne.n	8000f0c <__aeabi_f2uiz+0x38>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	4770      	bx	lr
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <HAL_TIM_IC_CaptureCallback>:
	.in2_pin = GPIO_PIN_11,
	.in_port = GPIOB

};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	send_flag=1;
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM3){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a37      	ldr	r2, [pc, #220]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d130      	bne.n	8000f8e <HAL_TIM_IC_CaptureCallback+0x7a>
	readEncoder(&motor_1,htim);
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4836      	ldr	r0, [pc, #216]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f30:	f000 fbb4 	bl	800169c <readEncoder>
//	Freq = 100kHz 1 tick = 1e-5
	current_time = overflow_time*200 + __HAL_TIM_GET_COUNTER(&htim2);
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	23c8      	movs	r3, #200	; 0xc8
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	4413      	add	r3, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f50:	601a      	str	r2, [r3, #0]
	if(motor_1.position!=prev_position_1){
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f54:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d04a      	beq.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0xe4>
		calculateRPM(&motor_1, current_time);
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4827      	ldr	r0, [pc, #156]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f6a:	f000 fbb5 	bl	80016d8 <calculateRPM>
		prev_position_1  = motor_1.position;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f70:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f76:	801a      	strh	r2, [r3, #0]
		motor_1.rpm = Moving_Average_Compute(motor_1.rpm, &filter_struct);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f7a:	8a1b      	ldrh	r3, [r3, #16]
 8000f7c:	4927      	ldr	r1, [pc, #156]	; (800101c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fc5a 	bl	8001838 <Moving_Average_Compute>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f8a:	821a      	strh	r2, [r3, #16]
			calculateRPM(&motor_2, current_time);
			prev_position_2  = motor_2.position;
			motor_2.rpm = Moving_Average_Compute(motor_2.rpm, &filter_struct);
			}
		}
}
 8000f8c:	e034      	b.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0xe4>
	else if(htim->Instance == TIM4){
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d12f      	bne.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0xe4>
		readEncoder(&motor_2,htim);
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4822      	ldr	r0, [pc, #136]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f9c:	f000 fb7e 	bl	800169c <readEncoder>
		current_time = overflow_time*200 + __HAL_TIM_GET_COUNTER(&htim4);
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	23c8      	movs	r3, #200	; 0xc8
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fbc:	601a      	str	r2, [r3, #0]
		if(motor_2.position!=prev_position_2){
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d014      	beq.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0xe4>
			calculateRPM(&motor_2, current_time);
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fd6:	f000 fb7f 	bl	80016d8 <calculateRPM>
			prev_position_2  = motor_2.position;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fdc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fe2:	801a      	strh	r2, [r3, #0]
			motor_2.rpm = Moving_Average_Compute(motor_2.rpm, &filter_struct);
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fe6:	8a1b      	ldrh	r3, [r3, #16]
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fc24 	bl	8001838 <Moving_Average_Compute>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ff6:	821a      	strh	r2, [r3, #16]
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f6 	.word	0x200001f6
 8001004:	40000400 	.word	0x40000400
 8001008:	20000000 	.word	0x20000000
 800100c:	2000022c 	.word	0x2000022c
 8001010:	200000cc 	.word	0x200000cc
 8001014:	20000228 	.word	0x20000228
 8001018:	2000022e 	.word	0x2000022e
 800101c:	200001f8 	.word	0x200001f8
 8001020:	40000800 	.word	0x40000800
 8001024:	20000020 	.word	0x20000020
 8001028:	2000015c 	.word	0x2000015c
 800102c:	20000230 	.word	0x20000230

08001030 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	if(htim->Instance == TIM2){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d108      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x24>
		overflow_time ++;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b29b      	uxth	r3, r3
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001052:	801a      	strh	r2, [r3, #0]
	}
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000022c 	.word	0x2000022c

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fe11 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f873 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 f9ff 	bl	8001474 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001076:	f000 f8a9 	bl	80011cc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800107a:	f000 f9d1 	bl	8001420 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800107e:	f000 f927 	bl	80012d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001082:	f000 f979 	bl	8001378 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001086:	4824      	ldr	r0, [pc, #144]	; (8001118 <main+0xb4>)
 8001088:	f001 fd6e 	bl	8002b68 <HAL_TIM_Base_Start_IT>

  initMotor(&motor_1,&htim2);
 800108c:	4922      	ldr	r1, [pc, #136]	; (8001118 <main+0xb4>)
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <main+0xb8>)
 8001090:	f000 fa42 	bl	8001518 <initMotor>
  initMotor(&motor_2,&htim2);
 8001094:	4920      	ldr	r1, [pc, #128]	; (8001118 <main+0xb4>)
 8001096:	4822      	ldr	r0, [pc, #136]	; (8001120 <main+0xbc>)
 8001098:	f000 fa3e 	bl	8001518 <initMotor>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800109c:	213c      	movs	r1, #60	; 0x3c
 800109e:	4821      	ldr	r0, [pc, #132]	; (8001124 <main+0xc0>)
 80010a0:	f001 ff50 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80010a4:	213c      	movs	r1, #60	; 0x3c
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <main+0xc4>)
 80010a8:	f001 ff4c 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>
  Moving_Average_Init(&filter_struct);
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <main+0xc8>)
 80010ae:	f000 fba5 	bl	80017fc <Moving_Average_Init>


  PID_Param pid_params;
	pid_params.Kp=1.12;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <main+0xcc>)
 80010b4:	603b      	str	r3, [r7, #0]
	pid_params.Ki=0.002;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <main+0xd0>)
 80010b8:	607b      	str	r3, [r7, #4]
	pid_params.Kd=30;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <main+0xd4>)
 80010bc:	60bb      	str	r3, [r7, #8]
	pid_params.Outmin=20;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <main+0xd8>)
 80010c0:	617b      	str	r3, [r7, #20]
	pid_params.Outmax=100;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <main+0xdc>)
 80010c4:	61bb      	str	r3, [r7, #24]
	pid_params.enable_anti_windup=1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
	pid_params.Anti_windup_error=40;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0xe0>)
 80010cc:	613b      	str	r3, [r7, #16]
//
	PID_Init(&pid_params);
 80010ce:	463b      	mov	r3, r7
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fb43 	bl	800175c <PID_Init>
	// Nho han lai chan A15
	setMotorPWM(&motor_1,&htim2,100);
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <main+0xdc>)
 80010d8:	490f      	ldr	r1, [pc, #60]	; (8001118 <main+0xb4>)
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <main+0xb8>)
 80010dc:	f000 fa84 	bl	80015e8 <setMotorPWM>
	setMotorPWM(&motor_2,&htim2,100);
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <main+0xdc>)
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <main+0xb4>)
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <main+0xbc>)
 80010e6:	f000 fa7f 	bl	80015e8 <setMotorPWM>
  {
//	  pwm = 50*sin(2*3.141*idx/1000)+50;
//	  setMotorPWM(&htim2, pwm);

//	  idx++;
	  if(send_flag==1){
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <main+0xe4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d1fb      	bne.n	80010ea <main+0x86>
		  send_flag=0;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <main+0xe4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		  sprintf(rpm_buffer,"%d\n",motor_1.rpm);
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <main+0xb8>)
 80010fa:	8a1b      	ldrh	r3, [r3, #16]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4913      	ldr	r1, [pc, #76]	; (800114c <main+0xe8>)
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <main+0xec>)
 8001102:	f002 ff8f 	bl	8004024 <siprintf>
		  //	  sprintf(pwm_buffer,"%d\n",pwm);
		  HAL_UART_Transmit(&huart1, (uint16_t *)rpm_buffer, sizeof(rpm_buffer), HAL_MAX_DELAY);
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	220a      	movs	r2, #10
 800110c:	4910      	ldr	r1, [pc, #64]	; (8001150 <main+0xec>)
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <main+0xf0>)
 8001110:	f002 fdd6 	bl	8003cc0 <HAL_UART_Transmit>
	  if(send_flag==1){
 8001114:	e7e9      	b.n	80010ea <main+0x86>
 8001116:	bf00      	nop
 8001118:	200000cc 	.word	0x200000cc
 800111c:	20000000 	.word	0x20000000
 8001120:	20000020 	.word	0x20000020
 8001124:	20000114 	.word	0x20000114
 8001128:	2000015c 	.word	0x2000015c
 800112c:	200001f8 	.word	0x200001f8
 8001130:	3f8f5c29 	.word	0x3f8f5c29
 8001134:	3b03126f 	.word	0x3b03126f
 8001138:	41f00000 	.word	0x41f00000
 800113c:	41a00000 	.word	0x41a00000
 8001140:	42c80000 	.word	0x42c80000
 8001144:	42200000 	.word	0x42200000
 8001148:	200001f6 	.word	0x200001f6
 800114c:	08004930 	.word	0x08004930
 8001150:	200001ec 	.word	0x200001ec
 8001154:	200001a4 	.word	0x200001a4

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ff54 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f88b 	bl	80022a8 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001198:	f000 f9b8 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 faf9 	bl	80027ac <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80011c0:	f000 f9a4 	bl	800150c <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3740      	adds	r7, #64	; 0x40
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	; 0x38
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_TIM2_Init+0x100>)
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_TIM2_Init+0x100>)
 8001206:	224f      	movs	r2, #79	; 0x4f
 8001208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_TIM2_Init+0x100>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_TIM2_Init+0x100>)
 8001212:	22c7      	movs	r2, #199	; 0xc7
 8001214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <MX_TIM2_Init+0x100>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM2_Init+0x100>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001222:	482a      	ldr	r0, [pc, #168]	; (80012cc <MX_TIM2_Init+0x100>)
 8001224:	f001 fc50 	bl	8002ac8 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800122e:	f000 f96d 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123c:	4619      	mov	r1, r3
 800123e:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM2_Init+0x100>)
 8001240:	f002 f8f8 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800124a:	f000 f95f 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800124e:	481f      	ldr	r0, [pc, #124]	; (80012cc <MX_TIM2_Init+0x100>)
 8001250:	f001 fcdc 	bl	8002c0c <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800125a:	f000 f957 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4619      	mov	r1, r3
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <MX_TIM2_Init+0x100>)
 800126e:	f002 fc67 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001278:	f000 f948 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8001280:	23f9      	movs	r3, #249	; 0xf9
 8001282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_TIM2_Init+0x100>)
 8001294:	f002 f80c 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800129e:	f000 f935 	bl	800150c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM2_Init+0x100>)
 80012ae:	f001 ffff 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80012b8:	f000 f928 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM2_Init+0x100>)
 80012be:	f000 fbcd 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80012c2:	bf00      	nop
 80012c4:	3738      	adds	r7, #56	; 0x38
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000cc 	.word	0x200000cc

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fe98 	bl	8004014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 936-1;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001300:	f240 32a7 	movw	r2, #935	; 0x3a7
 8001304:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001312:	2303      	movs	r3, #3
 8001314:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132a:	2301      	movs	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM3_Init+0xa0>)
 800133e:	f001 fd5f 	bl	8002e00 <HAL_TIM_Encoder_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001348:	f000 f8e0 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM3_Init+0xa0>)
 800135a:	f002 fbf1 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001364:	f000 f8d2 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000114 	.word	0x20000114
 8001374:	40000400 	.word	0x40000400

08001378 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fe44 	bl	8004014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_TIM4_Init+0xa0>)
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_TIM4_Init+0xa4>)
 8001398:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM4_Init+0xa0>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ba:	2303      	movs	r3, #3
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013e6:	f001 fd0b 	bl	8002e00 <HAL_TIM_Encoder_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f000 f88c 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM4_Init+0xa0>)
 8001402:	f002 fb9d 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800140c:	f000 f87e 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3730      	adds	r7, #48	; 0x30
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000015c 	.word	0x2000015c
 800141c:	40000800 	.word	0x40000800

08001420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART1_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART1_UART_Init+0x4c>)
 800142c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART1_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART1_UART_Init+0x4c>)
 8001458:	f002 fbe2 	bl	8003c20 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f853 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001a4 	.word	0x200001a4
 8001470:	40013800 	.word	0x40013800

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_GPIO_Init+0x90>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <MX_GPIO_Init+0x90>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_GPIO_Init+0x90>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_GPIO_Init+0x90>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <MX_GPIO_Init+0x90>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_GPIO_Init+0x90>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_GPIO_Init+0x90>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <MX_GPIO_Init+0x90>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_GPIO_Init+0x90>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <MX_GPIO_Init+0x94>)
 80014d8:	f000 fece 	bl	8002278 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014dc:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80014e0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4619      	mov	r1, r3
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_GPIO_Init+0x94>)
 80014f6:	f000 fd3b 	bl	8001f70 <HAL_GPIO_Init>

}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <initMotor>:
#include "motor.h"
#include <stdlib.h>

//Motor

void initMotor(motor_params* motor_params,TIM_HandleTypeDef* htim){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(STBY_PORT, STBY_PIN, GPIO_PIN_SET); //Turn on driver
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <initMotor+0x34>)
 800152a:	f000 fea5 	bl	8002278 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(htim, motor_params->pwm_channel);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	8a9b      	ldrh	r3, [r3, #20]
 8001532:	4619      	mov	r1, r3
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f001 fbc1 	bl	8002cbc <HAL_TIM_PWM_Start>
	setDutyCycle(motor_params,htim,0);
 800153a:	2200      	movs	r2, #0
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f806 	bl	8001550 <setDutyCycle>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010c00 	.word	0x40010c00

08001550 <setDutyCycle>:

void standByMode(){
	HAL_GPIO_WritePin(STBY_PORT, STBY_PIN, GPIO_PIN_RESET);
}

void setDutyCycle(motor_params* motor_params,TIM_HandleTypeDef* htim, uint32_t duty_cycle){
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
//	if(duty_cycle>100){
//		duty_cycle=100;
//	} else if (duty_cycle<15){
//		duty_cycle=0;
//	}
	float pw_resolution = (((float)(*htim).Init.Period + 1.0f) / 100.0f);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa99 	bl	8000a98 <__aeabi_ui2f>
 8001566:	4603      	mov	r3, r0
 8001568:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f9e3 	bl	8000938 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	491b      	ldr	r1, [pc, #108]	; (80015e4 <setDutyCycle+0x94>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb9a 	bl	8000cb0 <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	617b      	str	r3, [r7, #20]
	uint16_t pw_desired = pw_resolution * duty_cycle;
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fa89 	bl	8000a98 <__aeabi_ui2f>
 8001586:	4603      	mov	r3, r0
 8001588:	6979      	ldr	r1, [r7, #20]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fadc 	bl	8000b48 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc9e 	bl	8000ed4 <__aeabi_f2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	827b      	strh	r3, [r7, #18]
	__HAL_TIM_SET_COMPARE(htim, motor_params->pwm_channel, pw_desired);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8a9b      	ldrh	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <setDutyCycle+0x5e>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	8a7a      	ldrh	r2, [r7, #18]
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015ac:	e015      	b.n	80015da <setDutyCycle+0x8a>
	__HAL_TIM_SET_COMPARE(htim, motor_params->pwm_channel, pw_desired);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8a9b      	ldrh	r3, [r3, #20]
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d104      	bne.n	80015c0 <setDutyCycle+0x70>
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	8a7b      	ldrh	r3, [r7, #18]
 80015bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015be:	e00c      	b.n	80015da <setDutyCycle+0x8a>
	__HAL_TIM_SET_COMPARE(htim, motor_params->pwm_channel, pw_desired);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8a9b      	ldrh	r3, [r3, #20]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d104      	bne.n	80015d2 <setDutyCycle+0x82>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	8a7b      	ldrh	r3, [r7, #18]
 80015ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80015d0:	e003      	b.n	80015da <setDutyCycle+0x8a>
	__HAL_TIM_SET_COMPARE(htim, motor_params->pwm_channel, pw_desired);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	8a7b      	ldrh	r3, [r7, #18]
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	42c80000 	.word	0x42c80000

080015e8 <setMotorPWM>:
void setMotorPWM(motor_params* motor_params,TIM_HandleTypeDef*  htim, float duty_cycle_percentage){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
// 100 means full speed forward; -100 means full speed backward
	HAL_GPIO_WritePin(STBY_PORT, STBY_PIN, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fa:	4827      	ldr	r0, [pc, #156]	; (8001698 <setMotorPWM+0xb0>)
 80015fc:	f000 fe3c 	bl	8002278 <HAL_GPIO_WritePin>
	if(duty_cycle_percentage>0){
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fc5b 	bl	8000ec0 <__aeabi_fcmpgt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <setMotorPWM+0x5c>
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in1_pin, GPIO_PIN_SET);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	69d8      	ldr	r0, [r3, #28]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8adb      	ldrh	r3, [r3, #22]
 8001618:	2201      	movs	r2, #1
 800161a:	4619      	mov	r1, r3
 800161c:	f000 fe2c 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in2_pin, GPIO_PIN_RESET);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	69d8      	ldr	r0, [r3, #28]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8b1b      	ldrh	r3, [r3, #24]
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	f000 fe24 	bl	8002278 <HAL_GPIO_WritePin>
		setDutyCycle(motor_params,htim, duty_cycle_percentage);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fc4f 	bl	8000ed4 <__aeabi_f2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff ff87 	bl	8001550 <setDutyCycle>
	}else if (duty_cycle_percentage<0){
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in1_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in2_pin, GPIO_PIN_SET);
		setDutyCycle(motor_params,htim, -duty_cycle_percentage);
	}
}
 8001642:	e024      	b.n	800168e <setMotorPWM+0xa6>
	}else if (duty_cycle_percentage<0){
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fc1b 	bl	8000e84 <__aeabi_fcmplt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <setMotorPWM+0x6e>
}
 8001654:	e01b      	b.n	800168e <setMotorPWM+0xa6>
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in1_pin, GPIO_PIN_RESET);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	69d8      	ldr	r0, [r3, #28]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8adb      	ldrh	r3, [r3, #22]
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	f000 fe09 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_params->in_port, motor_params->in2_pin, GPIO_PIN_SET);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	69d8      	ldr	r0, [r3, #28]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8b1b      	ldrh	r3, [r3, #24]
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	f000 fe01 	bl	8002278 <HAL_GPIO_WritePin>
		setDutyCycle(motor_params,htim, -duty_cycle_percentage);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fc29 	bl	8000ed4 <__aeabi_f2uiz>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff ff61 	bl	8001550 <setDutyCycle>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40010c00 	.word	0x40010c00

0800169c <readEncoder>:
void readEncoder(motor_params* motor_params, TIM_HandleTypeDef *htim){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	motor_params->ucount = __HAL_TIM_GET_COUNTER(htim);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
	motor_params->scount = (int16_t)motor_params->ucount;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	811a      	strh	r2, [r3, #8]
	motor_params->position = (int16_t)(motor_params->scount/4);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	da00      	bge.n	80016c6 <readEncoder+0x2a>
 80016c4:	3303      	adds	r3, #3
 80016c6:	109b      	asrs	r3, r3, #2
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	815a      	strh	r2, [r3, #10]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <calculateRPM>:

void calculateRPM(motor_params* motor_params, int32_t current_time){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]


	motor_params->rpm = 60/(motor_params->pulse_per_rev*1e-5*abs(current_time - motor_params->prev_time));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fe84 	bl	80003f4 <__aeabi_i2d>
 80016ec:	a318      	add	r3, pc, #96	; (adr r3, 8001750 <calculateRPM+0x78>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fee9 	bl	80004c8 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4614      	mov	r4, r2
 80016fc:	461d      	mov	r5, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	bfb8      	it	lt
 800170a:	425b      	neglt	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe71 	bl	80003f4 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe fed5 	bl	80004c8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	490c      	ldr	r1, [pc, #48]	; (8001758 <calculateRPM+0x80>)
 8001728:	f7fe fff8 	bl	800071c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f8da 	bl	80008ec <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	821a      	strh	r2, [r3, #16]
	motor_params->prev_time = current_time;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	60da      	str	r2, [r3, #12]
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bdb0      	pop	{r4, r5, r7, pc}
 800174e:	bf00      	nop
 8001750:	88e368f1 	.word	0x88e368f1
 8001754:	3ee4f8b5 	.word	0x3ee4f8b5
 8001758:	404e0000 	.word	0x404e0000

0800175c <PID_Init>:
uint16_t time,last_time=0;
float error, prev_error=0, error_sum=0;
int8_t is_sat, is_same_sign;

void PID_Init(PID_Param *p)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	Kp=p->Kp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <PID_Init+0x78>)
 800176a:	6013      	str	r3, [r2, #0]
	Ki=p->Ki;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <PID_Init+0x7c>)
 8001772:	6013      	str	r3, [r2, #0]
	Kd=p->Kd;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <PID_Init+0x80>)
 800177a:	6013      	str	r3, [r2, #0]
	anti_windup_error=p->Anti_windup_error;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <PID_Init+0x84>)
 8001782:	6013      	str	r3, [r2, #0]
	Outmin=p->Outmin;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <PID_Init+0x88>)
 800178a:	6013      	str	r3, [r2, #0]
	Outmax=p->Outmax;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <PID_Init+0x8c>)
 8001792:	6013      	str	r3, [r2, #0]
	enable_anti_windup=p->enable_anti_windup;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <PID_Init+0x90>)
 800179a:	6013      	str	r3, [r2, #0]
	is_sat = p->is_sat;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <PID_Init+0x94>)
 80017a4:	701a      	strb	r2, [r3, #0]
	is_same_sign = p->is_same_sign;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <PID_Init+0x98>)
 80017ae:	701a      	strb	r2, [r3, #0]

	if(p->Anti_windup_error==0){anti_windup_error=10;}
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb59 	bl	8000e70 <__aeabi_fcmpeq>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <PID_Init+0x6a>
}
 80017c4:	e002      	b.n	80017cc <PID_Init+0x70>
	if(p->Anti_windup_error==0){anti_windup_error=10;}
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <PID_Init+0x84>)
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <PID_Init+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000234 	.word	0x20000234
 80017d8:	20000238 	.word	0x20000238
 80017dc:	2000023c 	.word	0x2000023c
 80017e0:	20000248 	.word	0x20000248
 80017e4:	20000240 	.word	0x20000240
 80017e8:	20000244 	.word	0x20000244
 80017ec:	2000024c 	.word	0x2000024c
 80017f0:	20000250 	.word	0x20000250
 80017f4:	20000251 	.word	0x20000251
 80017f8:	41200000 	.word	0x41200000

080017fc <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
	filter_struct->WindowPointer = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c

	for(uint32_t i=0; i<WindowLength; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e007      	b.n	8001826 <Moving_Average_Init+0x2a>
	{
		filter_struct->History[i] = 0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	2100      	movs	r1, #0
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<WindowLength; i++)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d9f4      	bls.n	8001816 <Moving_Average_Init+0x1a>
	}
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
uint32_t Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	441a      	add	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800185c:	1ad2      	subs	r2, r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(filter_struct->WindowPointer < WindowLength - 1)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	2b08      	cmp	r3, #8
 8001874:	d805      	bhi.n	8001882 <Moving_Average_Compute+0x4a>
	{
		filter_struct->WindowPointer += 1;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001880:	e002      	b.n	8001888 <Moving_Average_Compute+0x50>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return filter_struct->Sum/WindowLength;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <Moving_Average_Compute+0x68>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	08db      	lsrs	r3, r3, #3
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	cccccccd 	.word	0xcccccccd

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_MspInit+0x5c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_MspInit+0x5c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x5c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_MspInit+0x5c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_MspInit+0x60>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_MspInit+0x60>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d113      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201c      	movs	r0, #28
 8001938:	f000 fae3 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193c:	201c      	movs	r0, #28
 800193e:	f000 fafc 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <HAL_TIM_Encoder_MspInit+0xf8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d13e      	bne.n	80019ee <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	4a35      	ldr	r2, [pc, #212]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	61d3      	str	r3, [r2, #28]
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019a0:	2330      	movs	r3, #48	; 0x30
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4827      	ldr	r0, [pc, #156]	; (8001a50 <HAL_TIM_Encoder_MspInit+0x100>)
 80019b4:	f000 fadc 	bl	8001f70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x104>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x104>)
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	201d      	movs	r0, #29
 80019e2:	f000 fa8e 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e6:	201d      	movs	r0, #29
 80019e8:	f000 faa7 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ec:	e028      	b.n	8001a40 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <HAL_TIM_Encoder_MspInit+0x108>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d123      	bne.n	8001a40 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	61d3      	str	r3, [r2, #28]
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_TIM_Encoder_MspInit+0x100>)
 8001a3c:	f000 fa98 	bl	8001f70 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000800 	.word	0x40000800

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d117      	bne.n	8001aac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_TIM_MspPostInit+0x58>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_TIM_MspPostInit+0x58>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_TIM_MspPostInit+0x58>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a94:	2303      	movs	r3, #3
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <HAL_TIM_MspPostInit+0x5c>)
 8001aa8:	f000 fa62 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010800 	.word	0x40010800

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_UART_MspInit+0x8c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d131      	bne.n	8001b40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_UART_MspInit+0x94>)
 8001b22:	f000 fa25 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_MspInit+0x94>)
 8001b3c:	f000 fa18 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9a:	f000 f8bf 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM2_IRQHandler+0x10>)
 8001baa:	f001 fa79 	bl	80030a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000cc 	.word	0x200000cc

08001bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM3_IRQHandler+0x10>)
 8001bbe:	f001 fa6f 	bl	80030a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000114 	.word	0x20000114

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <_sbrk+0x5c>)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <_sbrk+0x60>)
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <_sbrk+0x64>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <_sbrk+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d207      	bcs.n	8001c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bfc:	f002 f9e0 	bl	8003fc0 <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	220c      	movs	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e009      	b.n	8001c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <_sbrk+0x64>)
 8001c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20005000 	.word	0x20005000
 8001c2c:	00000400 	.word	0x00000400
 8001c30:	20000254 	.word	0x20000254
 8001c34:	20000270 	.word	0x20000270

08001c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c44:	f7ff fff8 	bl	8001c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c4a:	490c      	ldr	r1, [pc, #48]	; (8001c7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c60:	4c09      	ldr	r4, [pc, #36]	; (8001c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f002 f9ad 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c72:	f7ff f9f7 	bl	8001064 <main>
  bx lr
 8001c76:	4770      	bx	lr
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001c80:	0800499c 	.word	0x0800499c
  ldr r2, =_sbss
 8001c84:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001c88:	2000026c 	.word	0x2000026c

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f923 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fdfa 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f93b 	bl	8001f56 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 f903 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000040 	.word	0x20000040
 8001d14:	20000048 	.word	0x20000048
 8001d18:	20000044 	.word	0x20000044

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x20>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <HAL_IncTick+0x20>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000048 	.word	0x20000048
 8001d3c:	20000258 	.word	0x20000258

08001d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_GetTick+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000258 	.word	0x20000258

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4906      	ldr	r1, [pc, #24]	; (8001dec <__NVIC_EnableIRQ+0x34>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff90 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff2d 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff42 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff35 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b08b      	sub	sp, #44	; 0x2c
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e169      	b.n	8002258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f84:	2201      	movs	r2, #1
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8158 	bne.w	8002252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a9a      	ldr	r2, [pc, #616]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d05e      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fac:	4a98      	ldr	r2, [pc, #608]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d875      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fb2:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d058      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fb8:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d86f      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fbe:	4a96      	ldr	r2, [pc, #600]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d052      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fc4:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d869      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fca:	4a94      	ldr	r2, [pc, #592]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04c      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fd0:	4a92      	ldr	r2, [pc, #584]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d863      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fd6:	4a92      	ldr	r2, [pc, #584]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d046      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fdc:	4a90      	ldr	r2, [pc, #576]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d85d      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d82a      	bhi.n	800203c <HAL_GPIO_Init+0xcc>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d859      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_GPIO_Init+0x80>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	0800206b 	.word	0x0800206b
 8001ff4:	08002045 	.word	0x08002045
 8001ff8:	08002057 	.word	0x08002057
 8001ffc:	08002099 	.word	0x08002099
 8002000:	0800209f 	.word	0x0800209f
 8002004:	0800209f 	.word	0x0800209f
 8002008:	0800209f 	.word	0x0800209f
 800200c:	0800209f 	.word	0x0800209f
 8002010:	0800209f 	.word	0x0800209f
 8002014:	0800209f 	.word	0x0800209f
 8002018:	0800209f 	.word	0x0800209f
 800201c:	0800209f 	.word	0x0800209f
 8002020:	0800209f 	.word	0x0800209f
 8002024:	0800209f 	.word	0x0800209f
 8002028:	0800209f 	.word	0x0800209f
 800202c:	0800209f 	.word	0x0800209f
 8002030:	0800209f 	.word	0x0800209f
 8002034:	0800204d 	.word	0x0800204d
 8002038:	08002061 	.word	0x08002061
 800203c:	4a79      	ldr	r2, [pc, #484]	; (8002224 <HAL_GPIO_Init+0x2b4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002042:	e02c      	b.n	800209e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e029      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	3304      	adds	r3, #4
 8002052:	623b      	str	r3, [r7, #32]
          break;
 8002054:	e024      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	3308      	adds	r3, #8
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e01f      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	330c      	adds	r3, #12
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e01a      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002072:	2304      	movs	r3, #4
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e013      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	611a      	str	r2, [r3, #16]
          break;
 800208a:	e009      	b.n	80020a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	615a      	str	r2, [r3, #20]
          break;
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          break;
 800209e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d801      	bhi.n	80020aa <HAL_GPIO_Init+0x13a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_Init+0x13e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d802      	bhi.n	80020bc <HAL_GPIO_Init+0x14c>
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x152>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	3b08      	subs	r3, #8
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	210f      	movs	r1, #15
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80b1 	beq.w	8002252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_GPIO_Init+0x2bc>)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_GPIO_Init+0x2c0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1ec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_GPIO_Init+0x2c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1e8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <HAL_GPIO_Init+0x2cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1e0>
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002150:	2304      	movs	r3, #4
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 800215c:	2300      	movs	r3, #0
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800216e:	492f      	ldr	r1, [pc, #188]	; (800222c <HAL_GPIO_Init+0x2bc>)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	492c      	ldr	r1, [pc, #176]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4928      	ldr	r1, [pc, #160]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	491e      	ldr	r1, [pc, #120]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4918      	ldr	r1, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4914      	ldr	r1, [pc, #80]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e021      	b.n	8002252 <HAL_GPIO_Init+0x2e2>
 800220e:	bf00      	nop
 8002210:	10320000 	.word	0x10320000
 8002214:	10310000 	.word	0x10310000
 8002218:	10220000 	.word	0x10220000
 800221c:	10210000 	.word	0x10210000
 8002220:	10120000 	.word	0x10120000
 8002224:	10110000 	.word	0x10110000
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
 8002240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	43db      	mvns	r3, r3
 800224c:	4909      	ldr	r1, [pc, #36]	; (8002274 <HAL_GPIO_Init+0x304>)
 800224e:	4013      	ands	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	3301      	adds	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f47f ae8e 	bne.w	8001f84 <HAL_GPIO_Init+0x14>
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	372c      	adds	r7, #44	; 0x2c
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e272      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c8:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d00c      	beq.n	80022ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x5e>
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d10b      	bne.n	8002306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ee:	4b89      	ldr	r3, [pc, #548]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d06c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x12c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d168      	bne.n	80023d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e24c      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x76>
 8002310:	4b80      	ldr	r3, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a7f      	ldr	r2, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e02e      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x98>
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0xbc>
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a71      	ldr	r2, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a67      	ldr	r2, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fcdc 	bl	8001d40 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff fcd8 	bl	8001d40 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e200      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b5d      	ldr	r3, [pc, #372]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xe4>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fcc8 	bl	8001d40 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff fcc4 	bl	8001d40 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1ec      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x10c>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d063      	beq.n	80024aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ee:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x18c>
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x176>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1c0      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4939      	ldr	r1, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e03a      	b.n	80024aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff fc7d 	bl	8001d40 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7ff fc79 	bl	8001d40 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1a1      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4927      	ldr	r1, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fc5c 	bl	8001d40 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff fc58 	bl	8001d40 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e180      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03a      	beq.n	800252c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7ff fc3c 	bl	8001d40 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7ff fc38 	bl	8001d40 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e160      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f000 face 	bl	8002a8c <RCC_Delay>
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7ff fc22 	bl	8001d40 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fe:	e00f      	b.n	8002520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7ff fc1e 	bl	8001d40 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d908      	bls.n	8002520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e146      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	42420000 	.word	0x42420000
 800251c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e9      	bne.n	8002500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a6 	beq.w	8002686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a87      	ldr	r2, [pc, #540]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	2301      	movs	r3, #1
 8002564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x4c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x4c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x4c8>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257e:	f7ff fbdf 	bl	8001d40 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7ff fbdb 	bl	8001d40 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e103      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4c8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x312>
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e02d      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x334>
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a69      	ldr	r2, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a66      	ldr	r2, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	e01c      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x356>
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a5a      	ldr	r2, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff fb8f 	bl	8001d40 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7ff fb8b 	bl	8001d40 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0b1      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <HAL_RCC_OscConfig+0x37e>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff fb79 	bl	8001d40 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fb75 	bl	8001d40 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e09b      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4a3b      	ldr	r2, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8087 	beq.w	800279e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d061      	beq.n	8002760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d146      	bne.n	8002732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff fb49 	bl	8001d40 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff fb45 	bl	8001d40 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e06d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4921      	ldr	r1, [pc, #132]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a19      	ldr	r1, [r3, #32]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	430b      	orrs	r3, r1
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fb19 	bl	8001d40 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff fb15 	bl	8001d40 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e03d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x46a>
 8002730:	e035      	b.n	800279e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fb02 	bl	8001d40 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff fafe 	bl	8001d40 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e026      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x4c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x498>
 800275e:	e01e      	b.n	800279e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e019      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x500>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	429a      	cmp	r2, r3
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0d0      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800282a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d040      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e073      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06b      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4936      	ldr	r1, [pc, #216]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7ff fa50 	bl	8001d40 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7ff fa4c 	bl	8001d40 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e053      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d210      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	4922      	ldr	r1, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1cc>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f9ae 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40022000 	.word	0x40022000
 8002970:	40021000 	.word	0x40021000
 8002974:	08004934 	.word	0x08004934
 8002978:	20000040 	.word	0x20000040
 800297c:	20000044 	.word	0x20000044

08002980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x94>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x30>
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ae:	e027      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80029b2:	613b      	str	r3, [r7, #16]
      break;
 80029b4:	e027      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	0c9b      	lsrs	r3, r3, #18
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x94>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0c5b      	lsrs	r3, r3, #17
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80029e2:	fb03 f202 	mul.w	r2, r3, r2
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e004      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	613b      	str	r3, [r7, #16]
      break;
 80029fe:	e002      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a02:	613b      	str	r3, [r7, #16]
      break;
 8002a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a06:	693b      	ldr	r3, [r7, #16]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	007a1200 	.word	0x007a1200
 8002a1c:	0800494c 	.word	0x0800494c
 8002a20:	0800495c 	.word	0x0800495c
 8002a24:	003d0900 	.word	0x003d0900

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	20000040 	.word	0x20000040

08002a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a40:	f7ff fff2 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4903      	ldr	r1, [pc, #12]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08004944 	.word	0x08004944

08002a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0adb      	lsrs	r3, r3, #11
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08004944 	.word	0x08004944

08002a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <RCC_Delay+0x34>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <RCC_Delay+0x38>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a5b      	lsrs	r3, r3, #9
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa8:	bf00      	nop
  }
  while (Delay --);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	60fa      	str	r2, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <RCC_Delay+0x1c>
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000040 	.word	0x20000040
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe ff0a 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fd76 	bl	80035f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e03a      	b.n	8002bf6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_TIM_Base_Start_IT+0x98>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x58>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d009      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x58>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x58>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d111      	bne.n	8002be4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d010      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	e007      	b.n	8002bf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800

08002c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e041      	b.n	8002ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f839 	bl	8002caa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fcd4 	bl	80035f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_TIM_PWM_Start+0x24>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e022      	b.n	8002d26 <HAL_TIM_PWM_Start+0x6a>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d109      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x3e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e015      	b.n	8002d26 <HAL_TIM_PWM_Start+0x6a>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d109      	bne.n	8002d14 <HAL_TIM_PWM_Start+0x58>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e008      	b.n	8002d26 <HAL_TIM_PWM_Start+0x6a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e05e      	b.n	8002dec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0x82>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_PWM_Start+0xaa>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x92>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_PWM_Start+0xaa>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0xa2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	e003      	b.n	8002d66 <HAL_TIM_PWM_Start+0xaa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fec2 	bl	8003af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_TIM_PWM_Start+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d107      	bne.n	8002d8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_TIM_PWM_Start+0x138>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xfa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d009      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xfa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_TIM_PWM_Start+0x13c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xfa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <HAL_TIM_PWM_Start+0x140>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d111      	bne.n	8002dda <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d010      	beq.n	8002dea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	e007      	b.n	8002dea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800

08002e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e093      	b.n	8002f3c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fe fd91 	bl	8001950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0307 	bic.w	r3, r3, #7
 8002e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 fbcf 	bl	80035f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	4313      	orrs	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ea0:	f023 030c 	bic.w	r3, r3, #12
 8002ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4313      	orrs	r3, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d110      	bne.n	8002f96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f7a:	7b7b      	ldrb	r3, [r7, #13]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e089      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f94:	e031      	b.n	8002ffa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d110      	bne.n	8002fbe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f9c:	7bbb      	ldrb	r3, [r7, #14]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fa2:	7b3b      	ldrb	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d001      	beq.n	8002fac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e075      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fbc:	e01d      	b.n	8002ffa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fca:	7b7b      	ldrb	r3, [r7, #13]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fd0:	7b3b      	ldrb	r3, [r7, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e05e      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d010      	beq.n	8003028 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003006:	e01f      	b.n	8003048 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fd71 	bl	8003af8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0202 	orr.w	r2, r2, #2
 8003024:	60da      	str	r2, [r3, #12]
      break;
 8003026:	e02e      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	2104      	movs	r1, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd61 	bl	8003af8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	60da      	str	r2, [r3, #12]
      break;
 8003046:	e01e      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd51 	bl	8003af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	2104      	movs	r1, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd4a 	bl	8003af8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0202 	orr.w	r2, r2, #2
 8003072:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0204 	orr.w	r2, r2, #4
 8003082:	60da      	str	r2, [r3, #12]
      break;
 8003084:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0202 	mvn.w	r2, #2
 80030cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd ff16 	bl	8000f14 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa69 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa6f 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0204 	mvn.w	r2, #4
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd feec 	bl	8000f14 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa3f 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fa45 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0208 	mvn.w	r2, #8
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2204      	movs	r2, #4
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fec2 	bl	8000f14 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa15 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fa1b 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0210 	mvn.w	r2, #16
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2208      	movs	r2, #8
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fe98 	bl	8000f14 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9eb 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9f1 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0201 	mvn.w	r2, #1
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd ff06 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fcdf 	bl	8003c0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f9b5 	bl	80035e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0220 	mvn.w	r2, #32
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fcaa 	bl	8003bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0ae      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	f200 809f 	bhi.w	800341c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003319 	.word	0x08003319
 80032e8:	0800341d 	.word	0x0800341d
 80032ec:	0800341d 	.word	0x0800341d
 80032f0:	0800341d 	.word	0x0800341d
 80032f4:	08003359 	.word	0x08003359
 80032f8:	0800341d 	.word	0x0800341d
 80032fc:	0800341d 	.word	0x0800341d
 8003300:	0800341d 	.word	0x0800341d
 8003304:	0800339b 	.word	0x0800339b
 8003308:	0800341d 	.word	0x0800341d
 800330c:	0800341d 	.word	0x0800341d
 8003310:	0800341d 	.word	0x0800341d
 8003314:	080033db 	.word	0x080033db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f9cc 	bl	80036bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
      break;
 8003356:	e064      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fa12 	bl	8003788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	619a      	str	r2, [r3, #24]
      break;
 8003398:	e043      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa5b 	bl	800385c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0208 	orr.w	r2, r2, #8
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0204 	bic.w	r2, r2, #4
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	61da      	str	r2, [r3, #28]
      break;
 80033d8:	e023      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 faa5 	bl	8003930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	021a      	lsls	r2, r3, #8
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	61da      	str	r2, [r3, #28]
      break;
 800341a:	e002      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e0b4      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x186>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003488:	d03e      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0xd4>
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	f200 8087 	bhi.w	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	f000 8086 	beq.w	80035a6 <HAL_TIM_ConfigClockSource+0x172>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d87f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d01a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xa6>
 80034a4:	2b70      	cmp	r3, #112	; 0x70
 80034a6:	d87b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d050      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x11a>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d877      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d03c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xfa>
 80034b4:	2b50      	cmp	r3, #80	; 0x50
 80034b6:	d873      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d058      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x13a>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d86f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d064      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d86b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d060      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d867      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d05a      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	e062      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f000 fae6 	bl	8003aba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
      break;
 8003506:	e04f      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f000 facf 	bl	8003aba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352a:	609a      	str	r2, [r3, #8]
      break;
 800352c:	e03c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fa46 	bl	80039cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2150      	movs	r1, #80	; 0x50
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa9d 	bl	8003a86 <TIM_ITRx_SetConfig>
      break;
 800354c:	e02c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	461a      	mov	r2, r3
 800355c:	f000 fa64 	bl	8003a28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2160      	movs	r1, #96	; 0x60
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa8d 	bl	8003a86 <TIM_ITRx_SetConfig>
      break;
 800356c:	e01c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	461a      	mov	r2, r3
 800357c:	f000 fa26 	bl	80039cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fa7d 	bl	8003a86 <TIM_ITRx_SetConfig>
      break;
 800358c:	e00c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fa74 	bl	8003a86 <TIM_ITRx_SetConfig>
      break;
 800359e:	e003      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <TIM_Base_SetConfig+0xb8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <TIM_Base_SetConfig+0xbc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <TIM_Base_SetConfig+0xc0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <TIM_Base_SetConfig+0xb8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <TIM_Base_SetConfig+0xbc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <TIM_Base_SetConfig+0xc0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <TIM_Base_SetConfig+0xb8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800

080036bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f023 0201 	bic.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0302 	bic.w	r3, r3, #2
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <TIM_OC1_SetConfig+0xc8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10c      	bne.n	8003732 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0308 	bic.w	r3, r3, #8
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <TIM_OC1_SetConfig+0xc8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d111      	bne.n	800375e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00

08003788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 0210 	bic.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0320 	bic.w	r3, r3, #32
 80037d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <TIM_OC2_SetConfig+0xd0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10d      	bne.n	8003804 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <TIM_OC2_SetConfig+0xd0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d113      	bne.n	8003834 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00

0800385c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_OC3_SetConfig+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10d      	bne.n	80038d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC3_SetConfig+0xd0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d113      	bne.n	8003906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00

08003930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800397a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <TIM_OC4_SetConfig+0x98>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d109      	bne.n	80039a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	019b      	lsls	r3, r3, #6
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00

080039cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 030a 	bic.w	r3, r3, #10
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	031b      	lsls	r3, r3, #12
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f043 0307 	orr.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	021a      	lsls	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e046      	b.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00e      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d009      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e042      	b.n	8003cb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd ff38 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f91d 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d16d      	bne.n	8003dbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x2c>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e066      	b.n	8003dbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2221      	movs	r2, #33	; 0x21
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fe f81f 	bl	8001d40 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d108      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e003      	b.n	8003d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d34:	e02a      	b.n	8003d8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f840 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e036      	b.n	8003dbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e007      	b.n	8003d7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1cf      	bne.n	8003d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f810 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b090      	sub	sp, #64	; 0x40
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	e050      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d04c      	beq.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de6:	f7fd ffab 	bl	8001d40 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d241      	bcs.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e16:	637a      	str	r2, [r7, #52]	; 0x34
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d09f      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3740      	adds	r7, #64	; 0x40
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ede:	f023 030c 	bic.w	r3, r3, #12
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <UART_SetConfig+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d103      	bne.n	8003f14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe fdaa 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	e002      	b.n	8003f1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fd92 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8003f18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009a      	lsls	r2, r3, #2
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <UART_SetConfig+0x118>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	0119      	lsls	r1, r3, #4
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009a      	lsls	r2, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <UART_SetConfig+0x118>)
 8003f52:	fba3 0302 	umull	r0, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2064      	movs	r0, #100	; 0x64
 8003f5a:	fb00 f303 	mul.w	r3, r0, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	3332      	adds	r3, #50	; 0x32
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <UART_SetConfig+0x118>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	4419      	add	r1, r3
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009a      	lsls	r2, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <UART_SetConfig+0x118>)
 8003f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2064      	movs	r0, #100	; 0x64
 8003f92:	fb00 f303 	mul.w	r3, r0, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <UART_SetConfig+0x118>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	440a      	add	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40013800 	.word	0x40013800
 8003fbc:	51eb851f 	.word	0x51eb851f

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000004c 	.word	0x2000004c

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	2600      	movs	r6, #0
 8003fd0:	4d0c      	ldr	r5, [pc, #48]	; (8004004 <__libc_init_array+0x38>)
 8003fd2:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	f000 fc9c 	bl	8004918 <_init>
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	4d0a      	ldr	r5, [pc, #40]	; (800400c <__libc_init_array+0x40>)
 8003fe4:	4c0a      	ldr	r4, [pc, #40]	; (8004010 <__libc_init_array+0x44>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08004994 	.word	0x08004994
 8004008:	08004994 	.word	0x08004994
 800400c:	08004994 	.word	0x08004994
 8004010:	08004998 	.word	0x08004998

08004014 <memset>:
 8004014:	4603      	mov	r3, r0
 8004016:	4402      	add	r2, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <siprintf>:
 8004024:	b40e      	push	{r1, r2, r3}
 8004026:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800402a:	b500      	push	{lr}
 800402c:	b09c      	sub	sp, #112	; 0x70
 800402e:	ab1d      	add	r3, sp, #116	; 0x74
 8004030:	9002      	str	r0, [sp, #8]
 8004032:	9006      	str	r0, [sp, #24]
 8004034:	9107      	str	r1, [sp, #28]
 8004036:	9104      	str	r1, [sp, #16]
 8004038:	4808      	ldr	r0, [pc, #32]	; (800405c <siprintf+0x38>)
 800403a:	4909      	ldr	r1, [pc, #36]	; (8004060 <siprintf+0x3c>)
 800403c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004040:	9105      	str	r1, [sp, #20]
 8004042:	6800      	ldr	r0, [r0, #0]
 8004044:	a902      	add	r1, sp, #8
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f000 f868 	bl	800411c <_svfiprintf_r>
 800404c:	2200      	movs	r2, #0
 800404e:	9b02      	ldr	r3, [sp, #8]
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	b01c      	add	sp, #112	; 0x70
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b003      	add	sp, #12
 800405a:	4770      	bx	lr
 800405c:	2000004c 	.word	0x2000004c
 8004060:	ffff0208 	.word	0xffff0208

08004064 <__ssputs_r>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	688e      	ldr	r6, [r1, #8]
 800406a:	4682      	mov	sl, r0
 800406c:	429e      	cmp	r6, r3
 800406e:	460c      	mov	r4, r1
 8004070:	4690      	mov	r8, r2
 8004072:	461f      	mov	r7, r3
 8004074:	d838      	bhi.n	80040e8 <__ssputs_r+0x84>
 8004076:	898a      	ldrh	r2, [r1, #12]
 8004078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800407c:	d032      	beq.n	80040e4 <__ssputs_r+0x80>
 800407e:	6825      	ldr	r5, [r4, #0]
 8004080:	6909      	ldr	r1, [r1, #16]
 8004082:	3301      	adds	r3, #1
 8004084:	eba5 0901 	sub.w	r9, r5, r1
 8004088:	6965      	ldr	r5, [r4, #20]
 800408a:	444b      	add	r3, r9
 800408c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004094:	106d      	asrs	r5, r5, #1
 8004096:	429d      	cmp	r5, r3
 8004098:	bf38      	it	cc
 800409a:	461d      	movcc	r5, r3
 800409c:	0553      	lsls	r3, r2, #21
 800409e:	d531      	bpl.n	8004104 <__ssputs_r+0xa0>
 80040a0:	4629      	mov	r1, r5
 80040a2:	f000 fb6f 	bl	8004784 <_malloc_r>
 80040a6:	4606      	mov	r6, r0
 80040a8:	b950      	cbnz	r0, 80040c0 <__ssputs_r+0x5c>
 80040aa:	230c      	movs	r3, #12
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	f8ca 3000 	str.w	r3, [sl]
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	464a      	mov	r2, r9
 80040c2:	6921      	ldr	r1, [r4, #16]
 80040c4:	f000 face 	bl	8004664 <memcpy>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	6126      	str	r6, [r4, #16]
 80040d6:	444e      	add	r6, r9
 80040d8:	6026      	str	r6, [r4, #0]
 80040da:	463e      	mov	r6, r7
 80040dc:	6165      	str	r5, [r4, #20]
 80040de:	eba5 0509 	sub.w	r5, r5, r9
 80040e2:	60a5      	str	r5, [r4, #8]
 80040e4:	42be      	cmp	r6, r7
 80040e6:	d900      	bls.n	80040ea <__ssputs_r+0x86>
 80040e8:	463e      	mov	r6, r7
 80040ea:	4632      	mov	r2, r6
 80040ec:	4641      	mov	r1, r8
 80040ee:	6820      	ldr	r0, [r4, #0]
 80040f0:	f000 fac6 	bl	8004680 <memmove>
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	2000      	movs	r0, #0
 80040f8:	1b9b      	subs	r3, r3, r6
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	4433      	add	r3, r6
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	e7db      	b.n	80040bc <__ssputs_r+0x58>
 8004104:	462a      	mov	r2, r5
 8004106:	f000 fbb1 	bl	800486c <_realloc_r>
 800410a:	4606      	mov	r6, r0
 800410c:	2800      	cmp	r0, #0
 800410e:	d1e1      	bne.n	80040d4 <__ssputs_r+0x70>
 8004110:	4650      	mov	r0, sl
 8004112:	6921      	ldr	r1, [r4, #16]
 8004114:	f000 face 	bl	80046b4 <_free_r>
 8004118:	e7c7      	b.n	80040aa <__ssputs_r+0x46>
	...

0800411c <_svfiprintf_r>:
 800411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	4698      	mov	r8, r3
 8004122:	898b      	ldrh	r3, [r1, #12]
 8004124:	4607      	mov	r7, r0
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	460d      	mov	r5, r1
 800412a:	4614      	mov	r4, r2
 800412c:	b09d      	sub	sp, #116	; 0x74
 800412e:	d50e      	bpl.n	800414e <_svfiprintf_r+0x32>
 8004130:	690b      	ldr	r3, [r1, #16]
 8004132:	b963      	cbnz	r3, 800414e <_svfiprintf_r+0x32>
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	f000 fb25 	bl	8004784 <_malloc_r>
 800413a:	6028      	str	r0, [r5, #0]
 800413c:	6128      	str	r0, [r5, #16]
 800413e:	b920      	cbnz	r0, 800414a <_svfiprintf_r+0x2e>
 8004140:	230c      	movs	r3, #12
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	e0d1      	b.n	80042ee <_svfiprintf_r+0x1d2>
 800414a:	2340      	movs	r3, #64	; 0x40
 800414c:	616b      	str	r3, [r5, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	9309      	str	r3, [sp, #36]	; 0x24
 8004152:	2320      	movs	r3, #32
 8004154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004158:	2330      	movs	r3, #48	; 0x30
 800415a:	f04f 0901 	mov.w	r9, #1
 800415e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004308 <_svfiprintf_r+0x1ec>
 8004166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800416a:	4623      	mov	r3, r4
 800416c:	469a      	mov	sl, r3
 800416e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004172:	b10a      	cbz	r2, 8004178 <_svfiprintf_r+0x5c>
 8004174:	2a25      	cmp	r2, #37	; 0x25
 8004176:	d1f9      	bne.n	800416c <_svfiprintf_r+0x50>
 8004178:	ebba 0b04 	subs.w	fp, sl, r4
 800417c:	d00b      	beq.n	8004196 <_svfiprintf_r+0x7a>
 800417e:	465b      	mov	r3, fp
 8004180:	4622      	mov	r2, r4
 8004182:	4629      	mov	r1, r5
 8004184:	4638      	mov	r0, r7
 8004186:	f7ff ff6d 	bl	8004064 <__ssputs_r>
 800418a:	3001      	adds	r0, #1
 800418c:	f000 80aa 	beq.w	80042e4 <_svfiprintf_r+0x1c8>
 8004190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004192:	445a      	add	r2, fp
 8004194:	9209      	str	r2, [sp, #36]	; 0x24
 8004196:	f89a 3000 	ldrb.w	r3, [sl]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80a2 	beq.w	80042e4 <_svfiprintf_r+0x1c8>
 80041a0:	2300      	movs	r3, #0
 80041a2:	f04f 32ff 	mov.w	r2, #4294967295
 80041a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041aa:	f10a 0a01 	add.w	sl, sl, #1
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	9307      	str	r3, [sp, #28]
 80041b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b6:	931a      	str	r3, [sp, #104]	; 0x68
 80041b8:	4654      	mov	r4, sl
 80041ba:	2205      	movs	r2, #5
 80041bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c0:	4851      	ldr	r0, [pc, #324]	; (8004308 <_svfiprintf_r+0x1ec>)
 80041c2:	f000 fa41 	bl	8004648 <memchr>
 80041c6:	9a04      	ldr	r2, [sp, #16]
 80041c8:	b9d8      	cbnz	r0, 8004202 <_svfiprintf_r+0xe6>
 80041ca:	06d0      	lsls	r0, r2, #27
 80041cc:	bf44      	itt	mi
 80041ce:	2320      	movmi	r3, #32
 80041d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d4:	0711      	lsls	r1, r2, #28
 80041d6:	bf44      	itt	mi
 80041d8:	232b      	movmi	r3, #43	; 0x2b
 80041da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b2a      	cmp	r3, #42	; 0x2a
 80041e4:	d015      	beq.n	8004212 <_svfiprintf_r+0xf6>
 80041e6:	4654      	mov	r4, sl
 80041e8:	2000      	movs	r0, #0
 80041ea:	f04f 0c0a 	mov.w	ip, #10
 80041ee:	9a07      	ldr	r2, [sp, #28]
 80041f0:	4621      	mov	r1, r4
 80041f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f6:	3b30      	subs	r3, #48	; 0x30
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d94e      	bls.n	800429a <_svfiprintf_r+0x17e>
 80041fc:	b1b0      	cbz	r0, 800422c <_svfiprintf_r+0x110>
 80041fe:	9207      	str	r2, [sp, #28]
 8004200:	e014      	b.n	800422c <_svfiprintf_r+0x110>
 8004202:	eba0 0308 	sub.w	r3, r0, r8
 8004206:	fa09 f303 	lsl.w	r3, r9, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	46a2      	mov	sl, r4
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	e7d2      	b.n	80041b8 <_svfiprintf_r+0x9c>
 8004212:	9b03      	ldr	r3, [sp, #12]
 8004214:	1d19      	adds	r1, r3, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	9103      	str	r1, [sp, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfbb      	ittet	lt
 800421e:	425b      	neglt	r3, r3
 8004220:	f042 0202 	orrlt.w	r2, r2, #2
 8004224:	9307      	strge	r3, [sp, #28]
 8004226:	9307      	strlt	r3, [sp, #28]
 8004228:	bfb8      	it	lt
 800422a:	9204      	strlt	r2, [sp, #16]
 800422c:	7823      	ldrb	r3, [r4, #0]
 800422e:	2b2e      	cmp	r3, #46	; 0x2e
 8004230:	d10c      	bne.n	800424c <_svfiprintf_r+0x130>
 8004232:	7863      	ldrb	r3, [r4, #1]
 8004234:	2b2a      	cmp	r3, #42	; 0x2a
 8004236:	d135      	bne.n	80042a4 <_svfiprintf_r+0x188>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	3402      	adds	r4, #2
 800423c:	1d1a      	adds	r2, r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	9203      	str	r2, [sp, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	f04f 33ff 	movlt.w	r3, #4294967295
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800430c <_svfiprintf_r+0x1f0>
 8004250:	2203      	movs	r2, #3
 8004252:	4650      	mov	r0, sl
 8004254:	7821      	ldrb	r1, [r4, #0]
 8004256:	f000 f9f7 	bl	8004648 <memchr>
 800425a:	b140      	cbz	r0, 800426e <_svfiprintf_r+0x152>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	eba0 000a 	sub.w	r0, r0, sl
 8004262:	fa03 f000 	lsl.w	r0, r3, r0
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	3401      	adds	r4, #1
 800426a:	4303      	orrs	r3, r0
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004272:	2206      	movs	r2, #6
 8004274:	4826      	ldr	r0, [pc, #152]	; (8004310 <_svfiprintf_r+0x1f4>)
 8004276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800427a:	f000 f9e5 	bl	8004648 <memchr>
 800427e:	2800      	cmp	r0, #0
 8004280:	d038      	beq.n	80042f4 <_svfiprintf_r+0x1d8>
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <_svfiprintf_r+0x1f8>)
 8004284:	bb1b      	cbnz	r3, 80042ce <_svfiprintf_r+0x1b2>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	3307      	adds	r3, #7
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	3308      	adds	r3, #8
 8004290:	9303      	str	r3, [sp, #12]
 8004292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004294:	4433      	add	r3, r6
 8004296:	9309      	str	r3, [sp, #36]	; 0x24
 8004298:	e767      	b.n	800416a <_svfiprintf_r+0x4e>
 800429a:	460c      	mov	r4, r1
 800429c:	2001      	movs	r0, #1
 800429e:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a2:	e7a5      	b.n	80041f0 <_svfiprintf_r+0xd4>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f04f 0c0a 	mov.w	ip, #10
 80042aa:	4619      	mov	r1, r3
 80042ac:	3401      	adds	r4, #1
 80042ae:	9305      	str	r3, [sp, #20]
 80042b0:	4620      	mov	r0, r4
 80042b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b6:	3a30      	subs	r2, #48	; 0x30
 80042b8:	2a09      	cmp	r2, #9
 80042ba:	d903      	bls.n	80042c4 <_svfiprintf_r+0x1a8>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0c5      	beq.n	800424c <_svfiprintf_r+0x130>
 80042c0:	9105      	str	r1, [sp, #20]
 80042c2:	e7c3      	b.n	800424c <_svfiprintf_r+0x130>
 80042c4:	4604      	mov	r4, r0
 80042c6:	2301      	movs	r3, #1
 80042c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042cc:	e7f0      	b.n	80042b0 <_svfiprintf_r+0x194>
 80042ce:	ab03      	add	r3, sp, #12
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	462a      	mov	r2, r5
 80042d4:	4638      	mov	r0, r7
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <_svfiprintf_r+0x1fc>)
 80042d8:	a904      	add	r1, sp, #16
 80042da:	f3af 8000 	nop.w
 80042de:	1c42      	adds	r2, r0, #1
 80042e0:	4606      	mov	r6, r0
 80042e2:	d1d6      	bne.n	8004292 <_svfiprintf_r+0x176>
 80042e4:	89ab      	ldrh	r3, [r5, #12]
 80042e6:	065b      	lsls	r3, r3, #25
 80042e8:	f53f af2c 	bmi.w	8004144 <_svfiprintf_r+0x28>
 80042ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ee:	b01d      	add	sp, #116	; 0x74
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4638      	mov	r0, r7
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <_svfiprintf_r+0x1fc>)
 80042fe:	a904      	add	r1, sp, #16
 8004300:	f000 f87c 	bl	80043fc <_printf_i>
 8004304:	e7eb      	b.n	80042de <_svfiprintf_r+0x1c2>
 8004306:	bf00      	nop
 8004308:	0800495e 	.word	0x0800495e
 800430c:	08004964 	.word	0x08004964
 8004310:	08004968 	.word	0x08004968
 8004314:	00000000 	.word	0x00000000
 8004318:	08004065 	.word	0x08004065

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4616      	mov	r6, r2
 8004322:	4699      	mov	r9, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	4607      	mov	r7, r0
 800432a:	4293      	cmp	r3, r2
 800432c:	bfb8      	it	lt
 800432e:	4613      	movlt	r3, r2
 8004330:	6033      	str	r3, [r6, #0]
 8004332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004336:	460c      	mov	r4, r1
 8004338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433c:	b10a      	cbz	r2, 8004342 <_printf_common+0x26>
 800433e:	3301      	adds	r3, #1
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	0699      	lsls	r1, r3, #26
 8004346:	bf42      	ittt	mi
 8004348:	6833      	ldrmi	r3, [r6, #0]
 800434a:	3302      	addmi	r3, #2
 800434c:	6033      	strmi	r3, [r6, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	f015 0506 	ands.w	r5, r5, #6
 8004354:	d106      	bne.n	8004364 <_printf_common+0x48>
 8004356:	f104 0a19 	add.w	sl, r4, #25
 800435a:	68e3      	ldr	r3, [r4, #12]
 800435c:	6832      	ldr	r2, [r6, #0]
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	42ab      	cmp	r3, r5
 8004362:	dc28      	bgt.n	80043b6 <_printf_common+0x9a>
 8004364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004368:	1e13      	subs	r3, r2, #0
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	bf18      	it	ne
 800436e:	2301      	movne	r3, #1
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d42d      	bmi.n	80043d0 <_printf_common+0xb4>
 8004374:	4649      	mov	r1, r9
 8004376:	4638      	mov	r0, r7
 8004378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800437c:	47c0      	blx	r8
 800437e:	3001      	adds	r0, #1
 8004380:	d020      	beq.n	80043c4 <_printf_common+0xa8>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	68e5      	ldr	r5, [r4, #12]
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf18      	it	ne
 800438e:	2500      	movne	r5, #0
 8004390:	6832      	ldr	r2, [r6, #0]
 8004392:	f04f 0600 	mov.w	r6, #0
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	bf08      	it	eq
 800439a:	1aad      	subeq	r5, r5, r2
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	bf08      	it	eq
 80043a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bfc4      	itt	gt
 80043a8:	1a9b      	subgt	r3, r3, r2
 80043aa:	18ed      	addgt	r5, r5, r3
 80043ac:	341a      	adds	r4, #26
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d11a      	bne.n	80043e8 <_printf_common+0xcc>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e008      	b.n	80043c8 <_printf_common+0xac>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4649      	mov	r1, r9
 80043bc:	4638      	mov	r0, r7
 80043be:	47c0      	blx	r8
 80043c0:	3001      	adds	r0, #1
 80043c2:	d103      	bne.n	80043cc <_printf_common+0xb0>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	3501      	adds	r5, #1
 80043ce:	e7c4      	b.n	800435a <_printf_common+0x3e>
 80043d0:	2030      	movs	r0, #48	; 0x30
 80043d2:	18e1      	adds	r1, r4, r3
 80043d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043de:	4422      	add	r2, r4
 80043e0:	3302      	adds	r3, #2
 80043e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043e6:	e7c5      	b.n	8004374 <_printf_common+0x58>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4622      	mov	r2, r4
 80043ec:	4649      	mov	r1, r9
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c0      	blx	r8
 80043f2:	3001      	adds	r0, #1
 80043f4:	d0e6      	beq.n	80043c4 <_printf_common+0xa8>
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7d9      	b.n	80043ae <_printf_common+0x92>
	...

080043fc <_printf_i>:
 80043fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	7e0f      	ldrb	r7, [r1, #24]
 8004402:	4691      	mov	r9, r2
 8004404:	2f78      	cmp	r7, #120	; 0x78
 8004406:	4680      	mov	r8, r0
 8004408:	460c      	mov	r4, r1
 800440a:	469a      	mov	sl, r3
 800440c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800440e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004412:	d807      	bhi.n	8004424 <_printf_i+0x28>
 8004414:	2f62      	cmp	r7, #98	; 0x62
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x32>
 8004418:	2f00      	cmp	r7, #0
 800441a:	f000 80d9 	beq.w	80045d0 <_printf_i+0x1d4>
 800441e:	2f58      	cmp	r7, #88	; 0x58
 8004420:	f000 80a4 	beq.w	800456c <_printf_i+0x170>
 8004424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800442c:	e03a      	b.n	80044a4 <_printf_i+0xa8>
 800442e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004432:	2b15      	cmp	r3, #21
 8004434:	d8f6      	bhi.n	8004424 <_printf_i+0x28>
 8004436:	a101      	add	r1, pc, #4	; (adr r1, 800443c <_printf_i+0x40>)
 8004438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800443c:	08004495 	.word	0x08004495
 8004440:	080044a9 	.word	0x080044a9
 8004444:	08004425 	.word	0x08004425
 8004448:	08004425 	.word	0x08004425
 800444c:	08004425 	.word	0x08004425
 8004450:	08004425 	.word	0x08004425
 8004454:	080044a9 	.word	0x080044a9
 8004458:	08004425 	.word	0x08004425
 800445c:	08004425 	.word	0x08004425
 8004460:	08004425 	.word	0x08004425
 8004464:	08004425 	.word	0x08004425
 8004468:	080045b7 	.word	0x080045b7
 800446c:	080044d9 	.word	0x080044d9
 8004470:	08004599 	.word	0x08004599
 8004474:	08004425 	.word	0x08004425
 8004478:	08004425 	.word	0x08004425
 800447c:	080045d9 	.word	0x080045d9
 8004480:	08004425 	.word	0x08004425
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004425 	.word	0x08004425
 800448c:	08004425 	.word	0x08004425
 8004490:	080045a1 	.word	0x080045a1
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0a4      	b.n	80045f2 <_printf_i+0x1f6>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	6829      	ldr	r1, [r5, #0]
 80044ac:	0606      	lsls	r6, r0, #24
 80044ae:	f101 0304 	add.w	r3, r1, #4
 80044b2:	d50a      	bpl.n	80044ca <_printf_i+0xce>
 80044b4:	680e      	ldr	r6, [r1, #0]
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	da03      	bge.n	80044c4 <_printf_i+0xc8>
 80044bc:	232d      	movs	r3, #45	; 0x2d
 80044be:	4276      	negs	r6, r6
 80044c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c4:	230a      	movs	r3, #10
 80044c6:	485e      	ldr	r0, [pc, #376]	; (8004640 <_printf_i+0x244>)
 80044c8:	e019      	b.n	80044fe <_printf_i+0x102>
 80044ca:	680e      	ldr	r6, [r1, #0]
 80044cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	bf18      	it	ne
 80044d4:	b236      	sxthne	r6, r6
 80044d6:	e7ef      	b.n	80044b8 <_printf_i+0xbc>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1d19      	adds	r1, r3, #4
 80044de:	6029      	str	r1, [r5, #0]
 80044e0:	0601      	lsls	r1, r0, #24
 80044e2:	d501      	bpl.n	80044e8 <_printf_i+0xec>
 80044e4:	681e      	ldr	r6, [r3, #0]
 80044e6:	e002      	b.n	80044ee <_printf_i+0xf2>
 80044e8:	0646      	lsls	r6, r0, #25
 80044ea:	d5fb      	bpl.n	80044e4 <_printf_i+0xe8>
 80044ec:	881e      	ldrh	r6, [r3, #0]
 80044ee:	2f6f      	cmp	r7, #111	; 0x6f
 80044f0:	bf0c      	ite	eq
 80044f2:	2308      	moveq	r3, #8
 80044f4:	230a      	movne	r3, #10
 80044f6:	4852      	ldr	r0, [pc, #328]	; (8004640 <_printf_i+0x244>)
 80044f8:	2100      	movs	r1, #0
 80044fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044fe:	6865      	ldr	r5, [r4, #4]
 8004500:	2d00      	cmp	r5, #0
 8004502:	bfa8      	it	ge
 8004504:	6821      	ldrge	r1, [r4, #0]
 8004506:	60a5      	str	r5, [r4, #8]
 8004508:	bfa4      	itt	ge
 800450a:	f021 0104 	bicge.w	r1, r1, #4
 800450e:	6021      	strge	r1, [r4, #0]
 8004510:	b90e      	cbnz	r6, 8004516 <_printf_i+0x11a>
 8004512:	2d00      	cmp	r5, #0
 8004514:	d04d      	beq.n	80045b2 <_printf_i+0x1b6>
 8004516:	4615      	mov	r5, r2
 8004518:	fbb6 f1f3 	udiv	r1, r6, r3
 800451c:	fb03 6711 	mls	r7, r3, r1, r6
 8004520:	5dc7      	ldrb	r7, [r0, r7]
 8004522:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004526:	4637      	mov	r7, r6
 8004528:	42bb      	cmp	r3, r7
 800452a:	460e      	mov	r6, r1
 800452c:	d9f4      	bls.n	8004518 <_printf_i+0x11c>
 800452e:	2b08      	cmp	r3, #8
 8004530:	d10b      	bne.n	800454a <_printf_i+0x14e>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	07de      	lsls	r6, r3, #31
 8004536:	d508      	bpl.n	800454a <_printf_i+0x14e>
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	6861      	ldr	r1, [r4, #4]
 800453c:	4299      	cmp	r1, r3
 800453e:	bfde      	ittt	le
 8004540:	2330      	movle	r3, #48	; 0x30
 8004542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004546:	f105 35ff 	addle.w	r5, r5, #4294967295
 800454a:	1b52      	subs	r2, r2, r5
 800454c:	6122      	str	r2, [r4, #16]
 800454e:	464b      	mov	r3, r9
 8004550:	4621      	mov	r1, r4
 8004552:	4640      	mov	r0, r8
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	aa03      	add	r2, sp, #12
 800455a:	f7ff fedf 	bl	800431c <_printf_common>
 800455e:	3001      	adds	r0, #1
 8004560:	d14c      	bne.n	80045fc <_printf_i+0x200>
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	b004      	add	sp, #16
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	4834      	ldr	r0, [pc, #208]	; (8004640 <_printf_i+0x244>)
 800456e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004572:	6829      	ldr	r1, [r5, #0]
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f851 6b04 	ldr.w	r6, [r1], #4
 800457a:	6029      	str	r1, [r5, #0]
 800457c:	061d      	lsls	r5, r3, #24
 800457e:	d514      	bpl.n	80045aa <_printf_i+0x1ae>
 8004580:	07df      	lsls	r7, r3, #31
 8004582:	bf44      	itt	mi
 8004584:	f043 0320 	orrmi.w	r3, r3, #32
 8004588:	6023      	strmi	r3, [r4, #0]
 800458a:	b91e      	cbnz	r6, 8004594 <_printf_i+0x198>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f023 0320 	bic.w	r3, r3, #32
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	2310      	movs	r3, #16
 8004596:	e7af      	b.n	80044f8 <_printf_i+0xfc>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	f043 0320 	orr.w	r3, r3, #32
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	2378      	movs	r3, #120	; 0x78
 80045a2:	4828      	ldr	r0, [pc, #160]	; (8004644 <_printf_i+0x248>)
 80045a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045a8:	e7e3      	b.n	8004572 <_printf_i+0x176>
 80045aa:	0659      	lsls	r1, r3, #25
 80045ac:	bf48      	it	mi
 80045ae:	b2b6      	uxthmi	r6, r6
 80045b0:	e7e6      	b.n	8004580 <_printf_i+0x184>
 80045b2:	4615      	mov	r5, r2
 80045b4:	e7bb      	b.n	800452e <_printf_i+0x132>
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	6826      	ldr	r6, [r4, #0]
 80045ba:	1d18      	adds	r0, r3, #4
 80045bc:	6961      	ldr	r1, [r4, #20]
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	0635      	lsls	r5, r6, #24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	d501      	bpl.n	80045ca <_printf_i+0x1ce>
 80045c6:	6019      	str	r1, [r3, #0]
 80045c8:	e002      	b.n	80045d0 <_printf_i+0x1d4>
 80045ca:	0670      	lsls	r0, r6, #25
 80045cc:	d5fb      	bpl.n	80045c6 <_printf_i+0x1ca>
 80045ce:	8019      	strh	r1, [r3, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	4615      	mov	r5, r2
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	e7ba      	b.n	800454e <_printf_i+0x152>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f82f 	bl	8004648 <memchr>
 80045ea:	b108      	cbz	r0, 80045f0 <_printf_i+0x1f4>
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	6060      	str	r0, [r4, #4]
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	2300      	movs	r3, #0
 80045f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fa:	e7a8      	b.n	800454e <_printf_i+0x152>
 80045fc:	462a      	mov	r2, r5
 80045fe:	4649      	mov	r1, r9
 8004600:	4640      	mov	r0, r8
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	47d0      	blx	sl
 8004606:	3001      	adds	r0, #1
 8004608:	d0ab      	beq.n	8004562 <_printf_i+0x166>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	079b      	lsls	r3, r3, #30
 800460e:	d413      	bmi.n	8004638 <_printf_i+0x23c>
 8004610:	68e0      	ldr	r0, [r4, #12]
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	4298      	cmp	r0, r3
 8004616:	bfb8      	it	lt
 8004618:	4618      	movlt	r0, r3
 800461a:	e7a4      	b.n	8004566 <_printf_i+0x16a>
 800461c:	2301      	movs	r3, #1
 800461e:	4632      	mov	r2, r6
 8004620:	4649      	mov	r1, r9
 8004622:	4640      	mov	r0, r8
 8004624:	47d0      	blx	sl
 8004626:	3001      	adds	r0, #1
 8004628:	d09b      	beq.n	8004562 <_printf_i+0x166>
 800462a:	3501      	adds	r5, #1
 800462c:	68e3      	ldr	r3, [r4, #12]
 800462e:	9903      	ldr	r1, [sp, #12]
 8004630:	1a5b      	subs	r3, r3, r1
 8004632:	42ab      	cmp	r3, r5
 8004634:	dcf2      	bgt.n	800461c <_printf_i+0x220>
 8004636:	e7eb      	b.n	8004610 <_printf_i+0x214>
 8004638:	2500      	movs	r5, #0
 800463a:	f104 0619 	add.w	r6, r4, #25
 800463e:	e7f5      	b.n	800462c <_printf_i+0x230>
 8004640:	0800496f 	.word	0x0800496f
 8004644:	08004980 	.word	0x08004980

08004648 <memchr>:
 8004648:	4603      	mov	r3, r0
 800464a:	b510      	push	{r4, lr}
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	4402      	add	r2, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	4618      	mov	r0, r3
 8004654:	d101      	bne.n	800465a <memchr+0x12>
 8004656:	2000      	movs	r0, #0
 8004658:	e003      	b.n	8004662 <memchr+0x1a>
 800465a:	7804      	ldrb	r4, [r0, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	428c      	cmp	r4, r1
 8004660:	d1f6      	bne.n	8004650 <memchr+0x8>
 8004662:	bd10      	pop	{r4, pc}

08004664 <memcpy>:
 8004664:	440a      	add	r2, r1
 8004666:	4291      	cmp	r1, r2
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d100      	bne.n	8004670 <memcpy+0xc>
 800466e:	4770      	bx	lr
 8004670:	b510      	push	{r4, lr}
 8004672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004676:	4291      	cmp	r1, r2
 8004678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467c:	d1f9      	bne.n	8004672 <memcpy+0xe>
 800467e:	bd10      	pop	{r4, pc}

08004680 <memmove>:
 8004680:	4288      	cmp	r0, r1
 8004682:	b510      	push	{r4, lr}
 8004684:	eb01 0402 	add.w	r4, r1, r2
 8004688:	d902      	bls.n	8004690 <memmove+0x10>
 800468a:	4284      	cmp	r4, r0
 800468c:	4623      	mov	r3, r4
 800468e:	d807      	bhi.n	80046a0 <memmove+0x20>
 8004690:	1e43      	subs	r3, r0, #1
 8004692:	42a1      	cmp	r1, r4
 8004694:	d008      	beq.n	80046a8 <memmove+0x28>
 8004696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800469a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800469e:	e7f8      	b.n	8004692 <memmove+0x12>
 80046a0:	4601      	mov	r1, r0
 80046a2:	4402      	add	r2, r0
 80046a4:	428a      	cmp	r2, r1
 80046a6:	d100      	bne.n	80046aa <memmove+0x2a>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046b2:	e7f7      	b.n	80046a4 <memmove+0x24>

080046b4 <_free_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4605      	mov	r5, r0
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d040      	beq.n	800473e <_free_r+0x8a>
 80046bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c0:	1f0c      	subs	r4, r1, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfb8      	it	lt
 80046c6:	18e4      	addlt	r4, r4, r3
 80046c8:	f000 f910 	bl	80048ec <__malloc_lock>
 80046cc:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <_free_r+0x8c>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	b933      	cbnz	r3, 80046e0 <_free_r+0x2c>
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	6014      	str	r4, [r2, #0]
 80046d6:	4628      	mov	r0, r5
 80046d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046dc:	f000 b90c 	b.w	80048f8 <__malloc_unlock>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d908      	bls.n	80046f6 <_free_r+0x42>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	1821      	adds	r1, r4, r0
 80046e8:	428b      	cmp	r3, r1
 80046ea:	bf01      	itttt	eq
 80046ec:	6819      	ldreq	r1, [r3, #0]
 80046ee:	685b      	ldreq	r3, [r3, #4]
 80046f0:	1809      	addeq	r1, r1, r0
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	e7ed      	b.n	80046d2 <_free_r+0x1e>
 80046f6:	461a      	mov	r2, r3
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b10b      	cbz	r3, 8004700 <_free_r+0x4c>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d9fa      	bls.n	80046f6 <_free_r+0x42>
 8004700:	6811      	ldr	r1, [r2, #0]
 8004702:	1850      	adds	r0, r2, r1
 8004704:	42a0      	cmp	r0, r4
 8004706:	d10b      	bne.n	8004720 <_free_r+0x6c>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	4401      	add	r1, r0
 800470c:	1850      	adds	r0, r2, r1
 800470e:	4283      	cmp	r3, r0
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	d1e0      	bne.n	80046d6 <_free_r+0x22>
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4401      	add	r1, r0
 800471a:	6011      	str	r1, [r2, #0]
 800471c:	6053      	str	r3, [r2, #4]
 800471e:	e7da      	b.n	80046d6 <_free_r+0x22>
 8004720:	d902      	bls.n	8004728 <_free_r+0x74>
 8004722:	230c      	movs	r3, #12
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	e7d6      	b.n	80046d6 <_free_r+0x22>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	1821      	adds	r1, r4, r0
 800472c:	428b      	cmp	r3, r1
 800472e:	bf01      	itttt	eq
 8004730:	6819      	ldreq	r1, [r3, #0]
 8004732:	685b      	ldreq	r3, [r3, #4]
 8004734:	1809      	addeq	r1, r1, r0
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6054      	str	r4, [r2, #4]
 800473c:	e7cb      	b.n	80046d6 <_free_r+0x22>
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	2000025c 	.word	0x2000025c

08004744 <sbrk_aligned>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4e0e      	ldr	r6, [pc, #56]	; (8004780 <sbrk_aligned+0x3c>)
 8004748:	460c      	mov	r4, r1
 800474a:	6831      	ldr	r1, [r6, #0]
 800474c:	4605      	mov	r5, r0
 800474e:	b911      	cbnz	r1, 8004756 <sbrk_aligned+0x12>
 8004750:	f000 f8bc 	bl	80048cc <_sbrk_r>
 8004754:	6030      	str	r0, [r6, #0]
 8004756:	4621      	mov	r1, r4
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f8b7 	bl	80048cc <_sbrk_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	d00a      	beq.n	8004778 <sbrk_aligned+0x34>
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d007      	beq.n	800477c <sbrk_aligned+0x38>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f8ac 	bl	80048cc <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d101      	bne.n	800477c <sbrk_aligned+0x38>
 8004778:	f04f 34ff 	mov.w	r4, #4294967295
 800477c:	4620      	mov	r0, r4
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	20000260 	.word	0x20000260

08004784 <_malloc_r>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	1ccd      	adds	r5, r1, #3
 800478a:	f025 0503 	bic.w	r5, r5, #3
 800478e:	3508      	adds	r5, #8
 8004790:	2d0c      	cmp	r5, #12
 8004792:	bf38      	it	cc
 8004794:	250c      	movcc	r5, #12
 8004796:	2d00      	cmp	r5, #0
 8004798:	4607      	mov	r7, r0
 800479a:	db01      	blt.n	80047a0 <_malloc_r+0x1c>
 800479c:	42a9      	cmp	r1, r5
 800479e:	d905      	bls.n	80047ac <_malloc_r+0x28>
 80047a0:	230c      	movs	r3, #12
 80047a2:	2600      	movs	r6, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4630      	mov	r0, r6
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ac:	4e2e      	ldr	r6, [pc, #184]	; (8004868 <_malloc_r+0xe4>)
 80047ae:	f000 f89d 	bl	80048ec <__malloc_lock>
 80047b2:	6833      	ldr	r3, [r6, #0]
 80047b4:	461c      	mov	r4, r3
 80047b6:	bb34      	cbnz	r4, 8004806 <_malloc_r+0x82>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	f7ff ffc2 	bl	8004744 <sbrk_aligned>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	4604      	mov	r4, r0
 80047c4:	d14d      	bne.n	8004862 <_malloc_r+0xde>
 80047c6:	6834      	ldr	r4, [r6, #0]
 80047c8:	4626      	mov	r6, r4
 80047ca:	2e00      	cmp	r6, #0
 80047cc:	d140      	bne.n	8004850 <_malloc_r+0xcc>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	4631      	mov	r1, r6
 80047d2:	4638      	mov	r0, r7
 80047d4:	eb04 0803 	add.w	r8, r4, r3
 80047d8:	f000 f878 	bl	80048cc <_sbrk_r>
 80047dc:	4580      	cmp	r8, r0
 80047de:	d13a      	bne.n	8004856 <_malloc_r+0xd2>
 80047e0:	6821      	ldr	r1, [r4, #0]
 80047e2:	3503      	adds	r5, #3
 80047e4:	1a6d      	subs	r5, r5, r1
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	4638      	mov	r0, r7
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7ff ffa5 	bl	8004744 <sbrk_aligned>
 80047fa:	3001      	adds	r0, #1
 80047fc:	d02b      	beq.n	8004856 <_malloc_r+0xd2>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	442b      	add	r3, r5
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	e00e      	b.n	8004824 <_malloc_r+0xa0>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	1b52      	subs	r2, r2, r5
 800480a:	d41e      	bmi.n	800484a <_malloc_r+0xc6>
 800480c:	2a0b      	cmp	r2, #11
 800480e:	d916      	bls.n	800483e <_malloc_r+0xba>
 8004810:	1961      	adds	r1, r4, r5
 8004812:	42a3      	cmp	r3, r4
 8004814:	6025      	str	r5, [r4, #0]
 8004816:	bf18      	it	ne
 8004818:	6059      	strne	r1, [r3, #4]
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	bf08      	it	eq
 800481e:	6031      	streq	r1, [r6, #0]
 8004820:	5162      	str	r2, [r4, r5]
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	4638      	mov	r0, r7
 8004826:	f104 060b 	add.w	r6, r4, #11
 800482a:	f000 f865 	bl	80048f8 <__malloc_unlock>
 800482e:	f026 0607 	bic.w	r6, r6, #7
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	1af2      	subs	r2, r6, r3
 8004836:	d0b6      	beq.n	80047a6 <_malloc_r+0x22>
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	50a3      	str	r3, [r4, r2]
 800483c:	e7b3      	b.n	80047a6 <_malloc_r+0x22>
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	42a3      	cmp	r3, r4
 8004842:	bf0c      	ite	eq
 8004844:	6032      	streq	r2, [r6, #0]
 8004846:	605a      	strne	r2, [r3, #4]
 8004848:	e7ec      	b.n	8004824 <_malloc_r+0xa0>
 800484a:	4623      	mov	r3, r4
 800484c:	6864      	ldr	r4, [r4, #4]
 800484e:	e7b2      	b.n	80047b6 <_malloc_r+0x32>
 8004850:	4634      	mov	r4, r6
 8004852:	6876      	ldr	r6, [r6, #4]
 8004854:	e7b9      	b.n	80047ca <_malloc_r+0x46>
 8004856:	230c      	movs	r3, #12
 8004858:	4638      	mov	r0, r7
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	f000 f84c 	bl	80048f8 <__malloc_unlock>
 8004860:	e7a1      	b.n	80047a6 <_malloc_r+0x22>
 8004862:	6025      	str	r5, [r4, #0]
 8004864:	e7de      	b.n	8004824 <_malloc_r+0xa0>
 8004866:	bf00      	nop
 8004868:	2000025c 	.word	0x2000025c

0800486c <_realloc_r>:
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	4680      	mov	r8, r0
 8004872:	4614      	mov	r4, r2
 8004874:	460e      	mov	r6, r1
 8004876:	b921      	cbnz	r1, 8004882 <_realloc_r+0x16>
 8004878:	4611      	mov	r1, r2
 800487a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	f7ff bf81 	b.w	8004784 <_malloc_r>
 8004882:	b92a      	cbnz	r2, 8004890 <_realloc_r+0x24>
 8004884:	f7ff ff16 	bl	80046b4 <_free_r>
 8004888:	4625      	mov	r5, r4
 800488a:	4628      	mov	r0, r5
 800488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004890:	f000 f838 	bl	8004904 <_malloc_usable_size_r>
 8004894:	4284      	cmp	r4, r0
 8004896:	4607      	mov	r7, r0
 8004898:	d802      	bhi.n	80048a0 <_realloc_r+0x34>
 800489a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800489e:	d812      	bhi.n	80048c6 <_realloc_r+0x5a>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4640      	mov	r0, r8
 80048a4:	f7ff ff6e 	bl	8004784 <_malloc_r>
 80048a8:	4605      	mov	r5, r0
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0ed      	beq.n	800488a <_realloc_r+0x1e>
 80048ae:	42bc      	cmp	r4, r7
 80048b0:	4622      	mov	r2, r4
 80048b2:	4631      	mov	r1, r6
 80048b4:	bf28      	it	cs
 80048b6:	463a      	movcs	r2, r7
 80048b8:	f7ff fed4 	bl	8004664 <memcpy>
 80048bc:	4631      	mov	r1, r6
 80048be:	4640      	mov	r0, r8
 80048c0:	f7ff fef8 	bl	80046b4 <_free_r>
 80048c4:	e7e1      	b.n	800488a <_realloc_r+0x1e>
 80048c6:	4635      	mov	r5, r6
 80048c8:	e7df      	b.n	800488a <_realloc_r+0x1e>
	...

080048cc <_sbrk_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	2300      	movs	r3, #0
 80048d0:	4d05      	ldr	r5, [pc, #20]	; (80048e8 <_sbrk_r+0x1c>)
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fd f978 	bl	8001bcc <_sbrk>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_sbrk_r+0x1a>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_sbrk_r+0x1a>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	20000264 	.word	0x20000264

080048ec <__malloc_lock>:
 80048ec:	4801      	ldr	r0, [pc, #4]	; (80048f4 <__malloc_lock+0x8>)
 80048ee:	f000 b811 	b.w	8004914 <__retarget_lock_acquire_recursive>
 80048f2:	bf00      	nop
 80048f4:	20000268 	.word	0x20000268

080048f8 <__malloc_unlock>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__malloc_unlock+0x8>)
 80048fa:	f000 b80c 	b.w	8004916 <__retarget_lock_release_recursive>
 80048fe:	bf00      	nop
 8004900:	20000268 	.word	0x20000268

08004904 <_malloc_usable_size_r>:
 8004904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004908:	1f18      	subs	r0, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfbc      	itt	lt
 800490e:	580b      	ldrlt	r3, [r1, r0]
 8004910:	18c0      	addlt	r0, r0, r3
 8004912:	4770      	bx	lr

08004914 <__retarget_lock_acquire_recursive>:
 8004914:	4770      	bx	lr

08004916 <__retarget_lock_release_recursive>:
 8004916:	4770      	bx	lr

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
